import tkinter as tk
from tkinter import messagebox, simpledialog

class ContactBookApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book App")

        # Create a dictionary to store contacts
        self.contacts = {}

        # Create GUI components
        self.create_widgets()

    def create_widgets(self):
        # Labels and Entry fields
        tk.Label(self.root, text="Name:").grid(row=0, column=0, padx=10, pady=10)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(self.root, text="Phone:").grid(row=1, column=0, padx=10, pady=10)
        self.phone_entry = tk.Entry(self.root)
        self.phone_entry.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(self.root, text="Email:").grid(row=2, column=0, padx=10, pady=10)
        self.email_entry = tk.Entry(self.root)
        self.email_entry.grid(row=2, column=1, padx=10, pady=10)

        # Buttons
        tk.Button(self.root, text="Add Contact", command=self.add_contact).grid(row=3, column=0, padx=10, pady=10)
        tk.Button(self.root, text="View Contact", command=self.view_contact).grid(row=3, column=1, padx=10, pady=10)
        tk.Button(self.root, text="Search Contact", command=self.search_contact).grid(row=4, column=0, padx=10, pady=10)
        tk.Button(self.root, text="Update Contact", command=self.update_contact).grid(row=4, column=1, padx=10, pady=10)
        tk.Button(self.root, text="Delete Contact", command=self.delete_contact).grid(row=5, column=0, padx=10, pady=10)

    def add_contact(self):
        name = self.name_entry.get()
        phone = self.phone_entry.get()
        email = self.email_entry.get()

        if not name or not phone or not email:
            messagebox.showwarning("Input Error", "Please fill in all fields")
            return

        if name in self.contacts:
            messagebox.showwarning("Exists", "Contact already exists")
            return

        self.contacts[name] = {'phone': phone, 'email': email}
        messagebox.showinfo("Success", "Contact added successfully")
        self.clear_entries()

    def view_contact(self):
        contact_list = "\n".join([f"{name}: Phone: {details['phone']}, Email: {details['email']}" 
                                  for name, details in self.contacts.items()])

        if contact_list:
            messagebox.showinfo("Contacts", contact_list)
        else:
            messagebox.showinfo("Contacts", "No contacts available")

    def search_contact(self):
        name = self.name_entry.get()

        if not name:
            messagebox.showwarning("Input Error", "Please enter the name of the contact to search")
            return

        contact = self.contacts.get(name)

        if contact:
            self.phone_entry.delete(0, tk.END)
            self.email_entry.delete(0, tk.END)
            self.phone_entry.insert(0, contact['phone'])
            self.email_entry.insert(0, contact['email'])
            messagebox.showinfo("Contact Found", f"Phone: {contact['phone']}\nEmail: {contact['email']}")
        else:
            messagebox.showwarning("Not Found", "Contact not found")

    def update_contact(self):
        name = self.name_entry.get()
        phone = self.phone_entry.get()
        email = self.email_entry.get()

        if not name:
            messagebox.showwarning("Input Error", "Please enter the name of the contact to update")
            return

        if name in self.contacts:
            if phone:
                self.contacts[name]['phone'] = phone
            if email:
                self.contacts[name]['email'] = email
            messagebox.showinfo("Success", "Contact updated successfully")
        else:
            messagebox.showwarning("Not Found", "Contact not found")

        self.clear_entries()

    def delete_contact(self):
        name = self.name_entry.get()

        if not name:
            messagebox.showwarning("Input Error", "Please enter the name of the contact to delete")
            return

        if name in self.contacts:
            del self.contacts[name]
            messagebox.showinfo("Success", "Contact deleted successfully")
            self.clear_entries()
        else:
            messagebox.showwarning("Not Found", "Contact not found")

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactBookApp(root)
    root.mainloop()

