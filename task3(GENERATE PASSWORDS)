import tkinter as tk
from tkinter import messagebox
import random
import string

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")
        
        # Create UI elements
        self.create_widgets()

    def create_widgets(self):
        # Length of Password
        tk.Label(self.root, text="Length:").grid(row=0, column=0, padx=10, pady=10)
        self.length_entry = tk.Entry(self.root)
        self.length_entry.grid(row=0, column=1, padx=10, pady=10)
        self.length_entry.insert(0, "12")

        # Uppercase
        self.uppercase_var = tk.BooleanVar()
        tk.Checkbutton(self.root, text="Include Uppercase", variable=self.uppercase_var).grid(row=1, column=0, columnspan=2, padx=10, pady=5)

        # Lowercase
        self.lowercase_var = tk.BooleanVar()
        tk.Checkbutton(self.root, text="Include Lowercase", variable=self.lowercase_var).grid(row=2, column=0, columnspan=2, padx=10, pady=5)

        # Digits
        self.digits_var = tk.BooleanVar()
        tk.Checkbutton(self.root, text="Include Digits", variable=self.digits_var).grid(row=3, column=0, columnspan=2, padx=10, pady=5)

        # Punctuation
        self.punctuation_var = tk.BooleanVar()
        tk.Checkbutton(self.root, text="Include Punctuation", variable=self.punctuation_var).grid(row=4, column=0, columnspan=2, padx=10, pady=5)

        # Generate Button
        tk.Button(self.root, text="Generate Password", command=self.generate_password).grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        # Password Output
        self.password_label = tk.Label(self.root, text="Generated Password:")
        self.password_label.grid(row=6, column=0, padx=10, pady=5)
        self.password_output = tk.Entry(self.root, width=50)
        self.password_output.grid(row=6, column=1, padx=10, pady=5)

    def generate_password(self):
        try:
            length = int(self.length_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid number for the length.")
            return
        
        if length < 1:
            messagebox.showerror("Input Error", "Length must be at least 1.")
            return
        
        char_sets = []
        if self.uppercase_var.get():
            char_sets.append(string.ascii_uppercase)
        if self.lowercase_var.get():
            char_sets.append(string.ascii_lowercase)
        if self.digits_var.get():
            char_sets.append(string.digits)
        if self.punctuation_var.get():
            char_sets.append(string.punctuation)
        
        if not char_sets:
            messagebox.showerror("Input Error", "Please select at least one character type.")
            return
        
        all_characters = ''.join(char_sets)
        password = ''.join(random.choice(all_characters) for _ in range(length))
        
        self.password_output.delete(0, tk.END)
        self.password_output.insert(0, password)

# Create the main window
root = tk.Tk()
app = PasswordGeneratorApp(root)

# Start the GUI event loop
root.mainloop()
